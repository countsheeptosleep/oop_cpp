// _____________________________________________________
// ____________ОБЪЯВЛЕНИЕ ИЕРАРХИИ КЛАССОВ______________
// _____________________________________________________

#include <string>
using namespace std;

// -----------------------------------------------------
// ------ 1. Объявление базового класса Location -------
// -----------------------------------------------------


// Базовый класс
class Location
{

protected:  // Доступно потомкам

	int X;  // Абсцисса
	int Y;  // Ордината

public:  // Публичные методы

	Location(int InitX, int InitY);  // Конструктор базового класса

	~Location();  // Деструктор базового класса

	int GetX();  // Получение значения абсциссы базового класса

	int GetY();  // Получение значения ординаты базового класса

	void SetX(int NewX);  // Изменение значения абсциссы базового класса

	void SetY(int NewY);  // Изменение значения ординаты базового класса

}; // Конец определения базового класса


// -----------------------------------------------------
// ------------ 2. Объявление класса Point -------------
// -----------------------------------------------------


// Класс точки
class Point : public Location
{

protected:  // Доступно потомкам

	bool Visible;  // Светимость точки

public:  // Публичные методы

	Point(int InitX, int InitY);  // Конструктор класса точки

	~Point();  // Деструктор класса точки

	bool GetVisible();  // Получение значения видимости точки

	void SetVisible(bool NewVisible);  // Изменение значения видимости точки

	void Show();  // Показать точку на экране

	void GetShowed();  // Показать точку на экране, если она не показана

	void Hide();  // Убрать точку с экрана

	void GetHidden();  // Убрать точку с экрана, если она не убрана

	virtual void Draw();  // Рисовать точку

	void MoveTo(int NewX, int NewY);  // Переместить точку на экране

	void Drag(int Step);  // Буксировка точки 

}; // Конец определения класса точки


// -----------------------------------------------------
// ----------- 3. Объявление класса Bicycle ------------
// -----------------------------------------------------


// Класс велосипед
class Bicycle : public Point
{

protected:  // Доступно потомкам

	int size; // Размер велосипеда

	int direction; // Направление велосипеда (0 - влево, 1 - вправо)

public:  // Публичные методы

	Bicycle(int InitX, int InitY, int InitSize, int InitDirection);  // Конструктор класса велосипеда 

	~Bicycle();  // Деструктор класса велосипеда

	int GetSize();  // Получение размера велосипеда

	void SetSize(int NewSize);  // Установка значения размера велосипеда

	int GetDirection();  // Получение значения направления велосипеда

	void SetDirection(int NewDirection);  // Установка значения направления велосипеда

	void Rotate();  // Повернуть велосипед

	void Expand(int DeltaSize); // Увеличить размер велосипеда

	void Reduce(int DeltaSize); // Уменьшить размер велосипеда

	void Draw();  // Рисовать велосипед

	virtual void WhenRide(int NewX, int NewY);  // Что происходит с велосипедом, когда он едет в новую точку

	void RideTo(int NewX, int NewY);  // Велосипед на экране едет в новую точку

	void BikeRiding(int Step);  // Управление велосипедом 

	void BikeRideOneStep(int Step);  // Управление велосипедом на 1 шаг


}; // Конец определения класса велосипеда


// -----------------------------------------------------
// ------- 4. Объявление класса ColouredBicycle --------
// -----------------------------------------------------


// Класс цветной велосипед
class ColouredBicycle : public Bicycle
{

protected:

	COLORREF colour;  // Цвет велосипеда 

public:

	ColouredBicycle(int InitX, int InitY, int InitSize, int InitDirection, COLORREF InitColour);  // Конструктор цветного велосипеда

	~ColouredBicycle();  // Деструктор цветного велосипеда

	COLORREF GetColour();  // Получить цвет велосипеда

	void SetColour(COLORREF NewColour);  // Установить новый цвет велосипеда

	void Draw();  // Рисовать цветной велосипед

}; //  Конец определения класса цветного велосипеда


// -------------------------------------------------------------
// ---------------- 5. Объявление класса TestBicycle -----------
// -------------------------------------------------------------


// Класс бесцветный велосипед
class TestBicycle : public Bicycle
{

public:

	TestBicycle(int InitX, int InitY, int InitSize, int InitDirection);  // Конструктор TestBicycle

	~TestBicycle();  // Деструктор TestBicycle

	void Draw();  // Рисовать TestBicycle

}; //  Конец определения класса TestBicycle


// -------------------------------------------------------------
// -------- 6. Объявление класса BicycleWithSpinningWheels ----
// -------------------------------------------------------------


// Класс велосипеда с анимацией вращения колес при движении
class BicycleWithSpinningWheels : public ColouredBicycle
{

protected:

	float SpinPhase;  // Фаза анимации вращения колес

public:

	BicycleWithSpinningWheels(int InitX, int InitY, int InitSize, int InitDirection, COLORREF InitColour);  // Конструктор велосипеда с анимацией вращения колес при движении

	~BicycleWithSpinningWheels();  // Деструктор велосипеда с анимацией вращения колес при движении

	int GetSpinPhase();  // Получить фазу вращения колес

	void SetSpinPhase(float NewSpinPhase);  // Установить фазу вращения колес

	void WhenRide(int NewX, int NewY);  // Что происходит с велосипедом, когда он едет в новую точку

	void Draw();  // Рисовать велосипед с анимацией вращения колес


}; //  Конец определения класса велосипеда с анимацией вращения колес при движении


// -------------------------------------------------------------
// ------------------ 7. Объявление класса Man -----------------
// -------------------------------------------------------------


// Класс человек
class Man : public Point {

protected:  // Доступно потомкам

	bool IsAlive;  // Жив ли человек

	int size; // Размер человека

	std::string name; // Имя человека

public:  // Публичные методы

	Man(int InitX, int InitY, int InitSize, std::string InitName);  // Констуктор человека

	~Man();  // Деструктор человека 

	bool GetIsAlive();  // Узнать, жив ли человек

	void SetIsAlive(bool NewIsAlive);  // Убить или воскресить человека

	int GetSize();  // Получение размера человека

	void SetSize(int NewSize);  // Установка значения размера человека

	string GetName(); // Получить имя

	void Draw();  // Рисуем человека

};  // Конец объявления класса человека


// -------------------------------------------------------------
// ------------------ 8. Объявление класса Male ----------------
// -------------------------------------------------------------


// Класс мужчина
class Male : public Man {

public:  // Публичные методы

	Male(int InitX, int InitY, int InitSize, std::string InitName);  // Констуктор мужчины

	~Male();  // Деструктор мужчины 

	void Draw();  // Рисуем мужчину

};  // Конец объявления класса мужчины


// -------------------------------------------------------------
// ------------------ 9. Объявление класса Female --------------
// -------------------------------------------------------------



// Класс женщина
class Female : public Man {

public:  // Публичные методы

	Female(int InitX, int InitY, int InitSize, std::string InitName);  // Констуктор женщины

	~Female();  // Деструктор женщины

	void Draw();  // Рисуем женщину

};  // Конец объявления класса женщины



// -------------------------------------------------------------
// ---------------- 10. Объявление класса Tricycle --------------
// -------------------------------------------------------------


// Класс трехколесный велосипед
class Tricycle : public Bicycle
{
public:

	Tricycle(int InitX, int InitY, int InitSize, int InitDirection);  // Конструктор трехколесного велосипеда

	~Tricycle();  // Деструктор трехколесного велосипеда

	void Draw();  // Рисовать трехколесный велосипед

}; //  Конец определения класса трехколесного велосипеда


// ----------------------------------------------------------------------
// ---------------- 11. Объявление класса ColouredTricycle --------------
// ----------------------------------------------------------------------


// Класс цветной трехколесный велосипед
class ColouredTricycle : public Tricycle
{

protected:

	COLORREF colour;  // Цвет велосипеда 

public:

	ColouredTricycle(int InitX, int InitY, int InitSize, int InitDirection, COLORREF InitColour);  // Конструктор цветного трехколесного велосипеда

	~ColouredTricycle();  // Деструктор цветного трехколесного велосипеда

	COLORREF GetColour();  // Получить цвет трехколесного велосипеда

	void SetColour(COLORREF NewColour);  // Установить новый цвет трехколесного велосипеда

	void Draw();  // Рисовать цветной трехколесный велосипед

}; //  Конец определения класса цветного трехколесного велосипеда



// ------------------------------------------------------------------------
// ------------ 12. Объявление класса TricycleWithSpinningWheels ----------
// ------------------------------------------------------------------------



// Класс трехколесного велосипеда с анимацией вращения колес при движении
class TricycleWithSpinningWheels : public ColouredTricycle
{

protected:

	float SpinPhase;  // Фаза анимации вращения колес

public:

	TricycleWithSpinningWheels(int InitX, int InitY, int InitSize, int InitDirection, COLORREF InitColour);  // Конструктор трехколесного велосипеда с анимацией вращения колес при движении

	~TricycleWithSpinningWheels();  // Деструктор трехколесного велосипеда с анимацией вращения колес при движении

	int GetSpinPhase();  // Получить фазу вращения колес

	void SetSpinPhase(float NewSpinPhase);  // Установить фазу вращения колес

	void WhenRide(int NewX, int NewY);  // Что происходит с трехколесным велосипедом, когда он едет в новую точку

	void Draw();  // Рисовать трехколесный велосипед с анимацией вращения колес


}; //  Конец определения класса трехколесного велосипеда с анимацией вращения колес при движении



// ------------------------------------------------------------------------
// -------------------------- 13. Объявление класса Button ----------------
// ------------------------------------------------------------------------



// Объявление класса кнопки 
class Button : public Point {

protected:

	int radius;  // Радиус кнопки 
	COLORREF colour;  // Цвет кнопки
	bool IsActivated;  // Активирована ли кнопка

public:

	Button(int InitX, int InitY, int InitRadius, COLORREF InitColour);  // Конструктор кнопки

	~Button();  // Деструктор кнопки

	void Draw();  // Рисовать кнопку

	int GetSize();  // Получить размеры

	bool GetIsActivated();  // Узнать активирована ли кнопка

	void SetIsActivated(bool NewIsActivated);  // Установить активированность кнопки

}; // Конец объявления класса кнопки 


// -------------------------------------------------------------------------
// -------------------------- 14. Объявление класса Tombstone -------------
// ------------------------------------------------------------------------\

class Tombstone : public Point {

protected:  // Доступно потомкам

	int size; // Размер могилы

	std::string name; // Имя человека

public:  // Публичные методы

	Tombstone(int InitX, int InitY, int InitSize, std::string InitName);  // Констуктор могилы

	Tombstone(Man man);  // Констуктор могилы

	~Tombstone();  // Деструктор могилы 

	int GetSize();  // Получение размера могилы

	void SetSize(int NewSize);  // Установка значения размера могилы

	void Draw();  // Рисуем могилу

};